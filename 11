//Department maintains a student information. The file contains roll number, name, division and address. Allow user to add, delete information of student. Display information of particular employee. If record of student does not exist an appropriate message is displayed. If it is, then the system displays the student details. Use sequential file to maintain the data.

#include <iostream>
#include <fstream> // File handling library
#include <map>
using namespace std;

// Function for adding student information
void addStudent(map<string, pair<string, string> >& students, string roll, string name, string division, string address) {
    students[roll] = make_pair(name, division + " " + address);
    cout << "Student added successfully.\n";
}

// Function to delete student information
void deleteStudent(map<string, pair<string, string> >& students, string roll) {
    if (students.erase(roll))
        cout << "Student deleted successfully.\n";
    else
        cout << "Student not found.\n";
}

// Function to display all student information
void displayAllStudents(const map<string, pair<string, string> >& students) {
    if (students.empty()) {
        cout << "No student records found.\n";
    } else {
        cout << "All Student Records:\n";
        map<string, pair<string, string> >::const_iterator it;
        for (it = students.begin(); it != students.end(); ++it) {
            cout << "Roll: " << it->first << ", Name: " << it->second.first << ", Division & Address: " << it->second.second << endl;
        }
    }
}

// Function to read data from file
void readDataFromFile(map<string, pair<string, string> >& students, const string& filename) {
    ifstream file(filename.c_str()); // Convert std::string to const char*
    if (file.is_open()) {
        string roll, name, division, address;
        while (file >> roll >> name >> division >> address) {
            students[roll] = make_pair(name, division + " " + address);
        }
        file.close();
        cout << "Data loaded from file successfully.\n";
    } else {
        cout << "File not found. Starting with an empty database.\n";
    }
}

// Function to save data to file
void saveDataToFile(const map<string, pair<string, string> >& students, const string& filename) {
    ofstream file(filename.c_str()); // Convert std::string to const char*
    if (file.is_open()) {
        map<string, pair<string, string> >::const_iterator it;
        for (it = students.begin(); it != students.end(); ++it) {
            file << it->first << " " << it->second.first << " " << it->second.second << endl;
        }
        file.close();
    } else {
        cout << "Unable to open file to save data.\n";
    }
}



int main() {
    const string filename = "students.txt"; // File name to store student data
    map<string, pair<string, string> > students;

    // Read data from file
    readDataFromFile(students, filename);

    // Main menu loop
    while (true) {
        // Display menu options
        cout << "\nStudent Database Menu:\n";
        cout << "1. Add Student\n";
        cout << "2. Delete Student\n";
        cout << "3. Display Student\n";
        cout << "4. Save Data to File\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        
        int choice;
        cin >> choice;
        
        switch (choice) {
            case 1: {
                // Add a new student
                string roll, name, division, address;
                cout << "Enter Roll Number: ";
                cin >> roll;
                cout << "Enter Name: ";
                cin >> name;
                cout << "Enter Division: ";
                cin >> division;
                cout << "Enter Address: ";
                cin >> address;
                addStudent(students, roll, name, division, address);
                break;
            }
            case 2: {
                // Delete a student
                string roll;
                cout << "Enter Roll Number to delete: ";
                cin >> roll;
                deleteStudent(students, roll);
                break;
            }
            case 3: {
                // Display student information
                displayAllStudents(students);
                break;
            }
            case 4: {
                // Save data to file
                saveDataToFile(students, filename);
                cout << "Data saved to file successfully.\n";
                break;
            }
            case 5:
                // Save data to file before exiting
                saveDataToFile(students, filename);
                cout << "Exiting...\n";
                return 0;
            default:
                // Invalid choice
                cout << "Invalid choice. Please enter again.\n";
        }
    }
}
